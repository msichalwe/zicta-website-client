// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String
  expires_at        BigInt
  id_token          String
  provider          String
  providerAccountId String
  scope             String
  token_type        String
  type              String
  userId            String @db.ObjectId
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime? @default(now())
  email          String?   @unique
  emailVerified  Json?
  hashedPassword String?
  image          String?
  name           String?
  updatedAt      DateTime? @updatedAt
  accounts       Account[]
}

model Media {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  type        String
  description String
  content     String
  categoryId  String    @db.ObjectId
  imageUrl    String
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  description String
  Media       Media[]
}

model Resource {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  type      String
  fileUrl   String
  fileType  String
}

model Procurement {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  type      String
  fileUrl   String
  fileType  String
}

model Files {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  url           String
  fileName      String
  fileFormat    String
  fileThumbnail String
}

model HeroSection {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime?          @default(now())
  updatedAt  DateTime?          @updatedAt
  title      String
  content    String
  buttonText String
  images     HeroSectionImage[]
}

model HeroSectionImage {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
  url           String
  HeroSection   HeroSection? @relation(fields: [heroSectionId], references: [id], onDelete: Cascade)
  heroSectionId String?      @db.ObjectId
}

model Partners {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt
  title       String
  description String
  images      PartnersImage[]
}

model PartnersImage {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  url        String
  Partners   Partners? @relation(fields: [partnersId], references: [id])
  partnersId String?   @db.ObjectId
}

model BannerSection {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  description String
  imageUrl    String
}

model Service {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  title       String
  description String
  content     String
  imageUrl    String?
  type        String
  subServices SubService[]

  @@unique([type])
}

model SubService {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  description String
  content     String
  imageUrl    String?
  serviceId   String    @db.ObjectId
  service     Service   @relation(fields: [serviceId], references: [id])
}

model WhatWeDo {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  title        String
  description  String
  whatWeDoCard WhatWeDoCard[]
}

model WhatWeDoCard {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  title      String
  content    String
  WhatWeDo   WhatWeDo? @relation(fields: [whatWeDoId], references: [id])
  whatWeDoId String?   @db.ObjectId
}

model Stats {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  description String
  stat        Stat[]
}

model ICTStats {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  file      String
  type      String
}

model LicenceFiles {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  title     String
  file      String
  type      String
  fileType  String
}

model Stat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  value     String
  showPlus  Boolean
  Stats     Stats?    @relation(fields: [statsId], references: [id])
  statsId   String?   @db.ObjectId
}

model Testimonial {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  title     String
  content   String
  imageUrl  String
}

model Faq {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  question  String
  answer    String
}

model Complaints {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  email     String
  phone     String
  subject   String
  message   String
  other     String?
}

model About {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  description String
  content     String
  imageUrl    String
}

model Director {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  name        String
  description String
  imageUrl    String
  board       Boolean   @default(false)
}

model SearchQuery {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  query String
}

model registeredPostal {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  orderedId     Int
  licenceNumber String
  operator      String?
  type          String
}

model nomination {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  nominee              String?
  nominee_email        String?
  nominee_reason       String?
  nominee_organization String?
  nominee_phone        String?
  awardCategoryId      String        @db.ObjectId
  awardCategory        AwardCategory @relation(fields: [awardCategoryId], references: [id])
}

model AwardCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  criteria    String
  evaluation  String
  nomination  nomination[]
}

model rsvp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  guest_first_name String
  guest_last_name  String
  guest_email      String
  guest_phone      String
  guest_organization    String
  guest_position   String
  guest_dietary_requirements String?
  attending String

}

model votes{
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  voter_email      String
  the_digital_transformation_champion_award    String?
  the_tech_for_good_trailblazer_award   String?
  the_connected_communities_crusader_award String?
  the_best_bang_for_your_byte_award String?
  the_steadfast_stream_award String?
  the_mobile_marvel_award String?
  express_delivery_champions_award String?
  the_captain_of_the_ship_award String?
  the_pillars_of_the_digital_economy_award String?
  the_consumer_centric_award_ict String?
  the_consumer_centric_award_postal_courier String?
  the_digital_disruptor_award String?
  the_model_corporate_citizen_award_ict String?
  the_model_corporate_citizen_award_postal String?
  the_cyber_sentinel_award String?
  the_best_digital_economy_coverage_award String?
  the_digital_literacy_champion_award String?

  @@unique([voter_email])
}
